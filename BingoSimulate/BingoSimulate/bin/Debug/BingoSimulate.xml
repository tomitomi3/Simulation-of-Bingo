<?xml version="1.0"?>
<doc>
<assembly>
<name>
BingoSimulate
</name>
</assembly>
<members>
<member name="T:BingoSimulate.clsBingoCardMgr">
 <summary>
 Bingo card manager
 </summary>
</member>
<member name="F:BingoSimulate.clsBingoCardMgr._bingoCards">
 <summary>bingo cards</summary>
</member>
<member name="F:BingoSimulate.clsBingoCardMgr._bingoNos">
 <summary>bingo No's</summary>
</member>
<member name="F:BingoSimulate.clsBingoCardMgr._gameRound">
 <summary>round</summary>
</member>
<member name="F:BingoSimulate.clsBingoCardMgr._bingoCumulativeCount">
 <summary>cumulative bingo count</summary>
</member>
<member name="F:BingoSimulate.clsBingoCardMgr._bingoCount">
 <summary>bingo count</summary>
</member>
<member name="P:BingoSimulate.clsBingoCardMgr.N">
 <summary>entry person</summary>
</member>
<member name="P:BingoSimulate.clsBingoCardMgr.IsExistFREE">
 <summary>Exist FREE</summary>
</member>
<member name="P:BingoSimulate.clsBingoCardMgr.NumberSequenceSeries">
 <summary>Bingo card number sequence</summary>
</member>
<member name="M:BingoSimulate.clsBingoCardMgr.#ctor">
 <summary>
 default constructor
 </summary>
</member>
<member name="M:BingoSimulate.clsBingoCardMgr.Init">
 <summary>
 Initialze
 </summary>
</member>
<member name="M:BingoSimulate.clsBingoCardMgr.PickBall">
 <summary>
 Pick ball
 </summary>
</member>
<member name="T:BingoSimulate.clsBingoCard">
 <summary>
 Bingocard
 </summary>
</member>
<member name="T:BingoSimulate.clsBingoCard.EnumBingoNumberSequence">
 <summary>Bingo card number sequence</summary>
</member>
<member name="F:BingoSimulate.clsBingoCard.EnumBingoNumberSequence.AllRandom">
 <summary>all random</summary>
</member>
<member name="F:BingoSimulate.clsBingoCard.EnumBingoNumberSequence.Collumn15Number">
 <summary>1:1~15 2:16~30 3:31~45 4:46~60 5:61~75</summary>
</member>
<member name="T:BingoSimulate.clsBingoCard.EnumBingoResult">
 <summary>Bingo card number sequence</summary>
</member>
<member name="F:BingoSimulate.clsBingoCard.EnumBingoResult.Blank">
 <summary>blank</summary>
</member>
<member name="F:BingoSimulate.clsBingoCard.EnumBingoResult.Bingo">
 <summary>Bingo</summary>
</member>
<member name="F:BingoSimulate.clsBingoCard.EnumBingoResult.DoneBingo">
 <summary>done Bingo</summary>
</member>
<member name="F:BingoSimulate.clsBingoCard.EnumBingoResult.Reach">
 <summary>not implement</summary>
</member>
<member name="M:BingoSimulate.clsBingoCard.#ctor">
 <summary>
 default constructor
 </summary>
</member>
<member name="M:BingoSimulate.clsBingoCard.Init(BingoSimulate.clsBingoCard.EnumBingoNumberSequence)">
 <summary>
 Init
 </summary>
</member>
<member name="M:BingoSimulate.clsBingoCard.SetNo(System.Int32)">
 <summary>
 set no
 </summary>
</member>
<member name="M:BingoSimulate.clsBingoCard.GetResult">
 <summary>
 Result
 </summary>
 <returns></returns>
</member>
<member name="M:BingoSimulate.clsBingoCard.CheckBingo">
 <summary>
 Check bingo
 </summary>
 <returns></returns>
</member>
<member name="T:BingoSimulate.clsRandomXorshift">
 <summary>
 Xorshift random algorithm
 Inherits System.Random
 </summary>
 <remarks>
 Refference:
 George Marsaglia, "Xorshift RNGs", Journal of Statistical Software Vol. 8, Issue 14, Jul 2003
 </remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.#ctor">
 <summary>
 Default constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.#ctor(System.UInt32)">
 <summary>
 Constructor with seed
 </summary>
 <param name="ai_seed"></param>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.SetSeed(System.UInt32)">
 <summary>
 Set random seed
 </summary>
 <param name="ai_seed"></param>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.Next">
 <summary>
 Override Next
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.Next(System.Int32)">
 <summary>
 Override Next
 </summary>
 <param name="maxValue"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.Next(System.Int32,System.Int32)">
 <summary>
 Override Next
 </summary>
 <param name="minValue"></param>
 <param name="maxValue"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.NextDouble">
 <summary>
 Override NextDouble
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.NextDouble(System.Double,System.Double)">
 <summary>
 Random double with range
 </summary>
 <param name="ai_min"></param>
 <param name="ai_max"></param>
 <returns></returns>
 <remarks>
 </remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.GetTimeSeed">
 <summary>
 for random seed
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.Xor128">
 <summary>
 Xor128
 </summary>
 <returns></returns>
 <remarks>
 C Source by refference
  t=(xˆ(x leftshift 11));
  x=y;
  y=z;
  z=w;
  return( w=(wˆ(w rightshift 19))ˆ(tˆ(t rightshift 8)) )
 </remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshift.RotateLeftShiftForUInteger(System.UInt32,System.Int32)">
 <summary>
 Rotate Shift
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:BingoSimulate.clsRandomXorshiftSingleton">
 <summary>
 Xorshift random algorithm singleton
 </summary>
 <remarks>
 </remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshiftSingleton.#ctor">
 <summary>
 Default constructor
 </summary>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshiftSingleton.GetInstance">
 <summary>
 Instance
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsRandomXorshiftSingleton.SetSeed(System.UInt32)">
 <summary>
 Set Seed
 </summary>
 <param name="ai_seed"></param>
 <remarks></remarks>
</member>
<member name="M:BingoSimulate.clsUtil.RandomPermutaion(System.Int32,System.Int32)">
 <summary>
 Generate Random permutation
 </summary>
 <param name="ai_max">0 to ai_max-1</param>
 <param name="ai_removeIndex">RemoveIndex</param>
 <returns></returns>
</member>
<member name="M:BingoSimulate.clsUtil.RandomPermutaion(System.Int32,System.Int32,System.Int32)">
 <summary>
 Generate Random permutation with range (ai_min to ai_max-1)
 </summary>
 <param name="ai_min">start value</param>
 <param name="ai_max">ai_max-1</param>
 <param name="ai_removeIndex">RemoveIndex -1 is invalid</param>
 <returns></returns>
</member>
<member name="M:BingoSimulate.Module1.Main(System.String[])">
 <summary>
 A Bingo simulation using Monte carlo method
 </summary>
</member>
<member name="T:BingoSimulate.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:BingoSimulate.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:BingoSimulate.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
</members>
</doc>
